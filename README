(C) 2004-2005, Oleg Kiselyov, Ralf Laemmel, Keean Schupke

OOHaskell -- Haskell's overlooked object system

The code relies on the HList library.
(The HList library is included into the OOHaskell distribution.)
The code has been released for GHC 6.4.
See the Makefile for ways of running test cases.
We use overlapping instances because of the favoured model of labels.
There are other OOHaskell models of labels that could be used instead.

Here is a brief overview on the sample files:

- SimpleIO.hs        -- Simple objects in classes; in IO monad.
- SimpleST.hs        -- Incomplete variation: ST monad is used instead.
- CircBuffer.hs      -- A typical polymorphic collection type.
- Selfish.hs         -- The notion of self, and many dependant OO concepts.
- Shapes.hs          -- The famous Shapes Benchmark; real OOP code in Haskell.
- SelfReturn.hs      -- Returning self; almost.
- CovariantReturn.hs -- Covariant return types as in Java 5
- RecList.hs         -- Illustration of recursive classes

More examples with status "UNDER DEVELOPMENT"

- Covariance.hs -- Investigation of co/contra-variance.
- LocalSigs.hs  -- Functional objects with local signatures.
- TwoTables.hs  -- Functional objects with methods and data separated.

Some extra sample directories:

- Weirich	-- The C++ implementation from the Shapes Code Suite.
- Rathman	-- The Haskell implementation from the Shape Code Suite.
- Shapes1 .. 6  -- non-OOHaskell-based implementations of shapes example.
- interpreter	-- An example that simulates extensible datatypes

Last updated; July 31, 2005
